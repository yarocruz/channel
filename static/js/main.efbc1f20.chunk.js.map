{"version":3,"sources":["components/Navbar.js","components/FeedItem.js","components/FeedContentList.js","components/FeedContent.js","components/Sidebar.js","pages/Guide.js","App.js","serviceWorker.js","index.js","assets/add-feed.png","assets/delete-feed.png"],"names":["Navbar","className","to","href","target","rel","FeedItem","title","onClick","onDelete","feedCount","style","paddingRight","length","substring","FeedContentList","item","isClicked","pubDates","Date","pubDate","link","toLocaleDateString","weekday","year","month","day","FeedContent","feeds","markAsRead","useState","clicked","setClicked","description","items","map","feed","i","key","v4","console","log","handleSelected","Sidebar","CORS_PROXY","setFeeds","feedName","setFeedName","id","feedItems","setFeedItems","useEffect","savedFeeds","JSON","parse","localStorage","getItem","feedTitle","selected","filter","Parser","parseURL","feedRSS","err","catch","renderSelectFeed","rest","setItem","stringify","deleteFeed","onSubmit","e","preventDefault","alert","feedData","feedDesc","feedUrl","type","value","onChange","Guide","maxWidth","src","AddFeed","alt","DeleteFeed","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.efbc1f20.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar() {\n    return (\n        <div className='navbar'>\n            <h1 className=\"logo\"><Link to='/'>Channel</Link></h1>\n            <nav>\n                <a href=\"https://en.wikipedia.org/wiki/RSS\" target='_blank' rel='noopener noreferrer'>What is RSS?</a>\n                <Link to='/guide'>Guide</Link>\n            </nav>\n        </div>\n    )\n}","import React from \"react\";\n\nexport default function FeedItem({ title, onClick, onDelete, feedCount }) {\n    return (\n        <div className='sidebar--feed-item'>\n            <li title={title} style={{ paddingRight: '15px'}} onClick={onClick} className='sidebar--feed-title'>\n                {title.length > 20 ? title.substring(0, 24) + '...' : title} <span className='sidebar--feed-item-count'>{feedCount}</span>\n            </li>\n            <p title='Delete Feed' className='sidebar--feed-delete' onClick={onDelete} >x</p>\n        </div>\n    )\n}","import React from \"react\";\n\nexport default function FeedContentList ({ item, onClick, isClicked }) {\n    let pubDates = new Date(item.pubDate);\n    let options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };\n    return (\n        <>\n            <li onClick={!isClicked ? onClick : null} className='content-links--item' >\n                <a href={item.link} target='_blank' rel='noopener noreferrer'>{item.title} <span className='content-links--item-date'>- {pubDates.toLocaleDateString('en-US', options)}</span> </a>\n            </li>\n        </>\n    )\n}","import React, { useState } from \"react\";\nimport FeedContentList from \"./FeedContentList\";\nimport { v4 } from 'uuid';\n\nexport default function FeedContent({ feeds, markAsRead }) {\n    const [clicked, setClicked] = useState([])\n\n    const handleSelected = (i) => {\n        // maybe in here setup localstorage to keep track of clicked items\n        setClicked([...clicked, clicked[i] = true])\n        markAsRead()\n        console.log(clicked)\n    }\n\n    return (\n        <div>\n            <ul className='content-links'>\n                <div className='content-links--info'>\n                    <h1>{feeds.title}</h1>\n                    <p>{feeds.description}</p>\n                </div>\n                {feeds.items.length ?\n                    feeds.items.map((feed) => {\n                        return feed.map((item, i) => (\n                            <FeedContentList\n                                key={v4()}\n                                item={item}\n                                onClick={(i) => handleSelected(i)}\n                                isClicked={clicked[i]}\n                            />\n\n                        ))\n                    }) :\n                    <li>Select a Feed</li>\n                }\n            </ul>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport Parser from \"rss-parser\";\nimport FeedItem from \"./FeedItem\";\nimport FeedContent from \"./FeedContent\";\nimport { v4 } from 'uuid';\n\n/*\n    feeds to test out\n    http://www.aaronsw.com/2002/feeds/pgessays.rss\n    https://us1.campaign-archive.com/feed?u=faa8eb4ef3a111cef92c4f3d4&id=e505c88a2e\n    https://us1.campaign-archive.com/feed?u=25a34f10515c4e9393e3da856&id=280158dda1\n    https://feeds.feedblitz.com/sethsblog\n    https://news.ycombinator.com/rss\n    https://whatthefuck.is/feed.xml\n    http://feeds.feedburner.com/codinghorror?format=xml\n    https://www.taniarascia.com/rss.xml\n    https://cprss.s3.amazonaws.com/javascriptweekly.com.xml\n    http://feeds.feedburner.com/scotthyoung/HAHx?format=xml\n*/\n\nexport default function Sidebar() {\n\n    const CORS_PROXY = `https://cors-anywhere.herokuapp.com/`;\n\n    const [feeds, setFeeds] = useState([]);\n    const [feedName, setFeedName ] = useState('');\n    const [feedItems, setFeedItems] = useState(\n        {\n            id: '',\n            title: '',\n            description: '',\n            items: [],\n        }\n    );\n\n    useEffect(() => {\n        const savedFeeds = JSON.parse(localStorage.getItem('feeds'));\n        if (savedFeeds === null) return;\n        setFeeds(savedFeeds)\n    }, []);\n\n    const addFeed = (e) => {\n        e.preventDefault();\n\n        let parser = new Parser();\n        parser.parseURL(`${CORS_PROXY}${feedName}`, (err, feed) => {\n            if (err) {\n                alert('Must enter a valid RSS feed'); // this solution is ratchet and I need to check if feed is already there.\n                throw err;\n            }\n            console.log(feed);\n            let feedData = {\n                id: v4(),\n                feedRSS: feedName,\n                feedTitle: feed.title,\n                feedDesc: feed.description,\n                feedUrl: feed.link,\n                feedItems: feed.items.length\n            }\n            localStorage.setItem('feeds', JSON.stringify([...feeds, feedData]));\n            setFeeds([...feeds, feedData ]);\n        }).catch(err => {\n            console.log(err);\n        });\n        console.log(feeds);\n\n        setFeedName('');\n    }\n\n    const markAsRead = (id) => {\n        setFeeds(feeds.filter(item => {\n            if (item.id === id) {\n\n                return [...feeds, item['feedItems'] -= 1] // No sure if this is the best, but it's doing the count\n            }\n\n            console.log(item)\n            return feedItems;\n        }))\n        localStorage.setItem('feeds', JSON.stringify([...feeds]));\n    }\n\n    const deleteFeed = (id) => {\n        let rest = feeds.filter(item => item.id !== id);\n        console.log(rest);\n        setFeeds([...rest])\n        localStorage.setItem('feeds', JSON.stringify([...rest]));\n    }\n\n    const renderSelectFeed = (id) => {\n        let selected = feeds.filter(feed => feed.id === id);\n        let parser = new Parser();\n        parser.parseURL(`${CORS_PROXY}${selected[0].feedRSS}`, (err, feed) => {\n            if (err) throw err;\n            setFeedItems({\n                id: selected[0].id,\n                title: feed.title,\n                description: feed.description,\n                items: [ feed.items]\n            });\n            console.log(feedItems)\n\n        }).catch(err => console.log(err));\n    }\n\n    return (\n        <div className='main-container'>\n            <div className=\"sidebar\">\n                <ul className=\"sidebar--feed-list\">\n                    {feeds.length ?\n                        feeds.map(feed => (\n                            <FeedItem\n                                title={feed.feedTitle}\n                                feedCount={feed.feedItems}\n                                key={v4()}\n                                onClick={() => renderSelectFeed(feed.id)}\n                                onDelete={() => deleteFeed(feed.id)}\n                            />\n                        )) :\n                        <li>No feeds yet.</li>\n                    }\n                </ul>\n\n                <form className=\"sidebar-form\" onSubmit={addFeed} >\n                    <input type=\"text\" value={feedName} onChange={e => setFeedName(e.target.value)}/>\n                    <button>Add a Feed</button>\n                </form>\n            </div>\n\n            <FeedContent feeds={feedItems} markAsRead={() => markAsRead(feedItems.id)} />\n        </div>\n    )\n}","import React from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport AddFeed from '../assets/add-feed.png';\nimport DeleteFeed from '../assets/delete-feed.png';\n\nexport default function Guide() {\n    return (\n        <>\n            <Navbar />\n            <div className='guide-container'>\n                <div className='guide-container--content'>\n                    <h2>How to Add a Feed</h2>\n\n                    <img style={{ maxWidth: '100%'}} src={AddFeed} alt=\"screenshot of input field\"/>\n                    <p>Adding a feed is pretty straight forward. All you need to do is to make sure\n                        you're typing, most likely pasting, a valid rss feed link. If the feed is not\n                        valid, you will get a browser alert (currently working on nicer solution) indicating that\n                        the feed is not valid. A typical feed link could look like this <a href=\"https://whatthefuck.is/feed.xml\">https://whatthefuck.is/feed.xml</a> Just make sure the link\n                        is an actual rss feed address instead of the url of page. Most blogs have an\n                        RSS feed link somewhere in their navigation. Be aware however some sites bury them in\n                        the footer somewhere. Some sites simply don't have an RSS feed.</p>\n\n                    <h2>Deleting a Feed</h2>\n                    <img style={{ maxWidth: '100%'}} src={DeleteFeed} alt=\"screenshot of input field\"/>\n                    <p>To delete a feed simply hover and click the x.</p>\n\n                    <h2>How this App is Working</h2>\n                    <p>This app is still a work in progress and at the moment it is best viewed on desktop sized screens. It's using the browser's localStorage to make the feeds you add persist.\n                        I added the feature that keeps track of the items you read, but it's currently buggy. I'm hoping\n                        to keep adding features. It's built with React. If you're a coder and want to collaborate or give me\n                        some pointers checkout the <a href=\"https://github.com/yarocruz/channel\">code at Github</a> and let me know.</p>\n                </div>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Guide from \"./pages/Guide\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n            <Switch>\n                <Route exact path='/'>\n                    <Navbar />\n                    <Sidebar />\n                </Route>\n                <Route path='/guide'>\n                    <Guide />\n                </Route>\n            </Switch>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/add-feed.9189382b.png\";","module.exports = __webpack_public_path__ + \"static/media/delete-feed.eb2c40ee.png\";"],"sourceRoot":""}